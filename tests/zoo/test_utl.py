import numpy as np
import pytest

from imagelab.patches import PatchConfig
from imagelab.sparsity import nd_dctmtx
from imagelab.zoo import utl


@pytest.mark.parametrize(
    "patch_shape,prox,pad",
    [
        ((4, 7), "l0", "wrap"),
        ((6, 6), "l0", None),
        ((5, 5), "l1", "wrap"),
        ((7, 5), "l0", "wrap"),
        ((1, 7), "l1", "constant"),
    ],
)
def test_utl_runs(patch_shape, prox, pad):  # will it even run?
    iters = []

    def func(x, itr):
        return iters.append(itr)

    np.random.seed(643)
    Xtest_true = np.random.randn(150, 223).astype(np.float32)
    Xtest0 = Xtest_true + 0.1 * np.random.randn(*Xtest_true.shape).astype(np.float32)

    def data_update(X, weight):
        return (X + 1e-6 * Xtest0) / (weight + 1e-6)  # denoising

    Xhat = utl.blind_utl(
        Xtest0,
        data_update=data_update,
        gamma=None,
        patch_config=PatchConfig(
            arr_shape=Xtest0.shape, patch_shape=patch_shape, pad=pad, stride=1
        ),
        niter=5,
        ninner=2,
        prox=prox,
        callback=func,
    )
    assert len(iters) == 6
    assert (np.array(iters) == np.r_[0:6]).all()
    assert Xhat.shape == Xtest0.shape
    assert Xhat.dtype == Xtest_true.dtype


def test_utl_regression():
    patch_shape = (3, 3)
    prox = "l0"
    pad = None
    # fmt: off
    Xtest_true = np.array(
        [  # make this as deterministic as possible
            [
                0.29019608, 0.03921569, 0.03137255, 0.03921569, 0.39607843,
                0.26274510, 0.05882353, 0.29019608, 0.68235294, 0.65490196,
                0.07843137, 0.29803922, 0.44313725, 0.77254902, 0.90196078,
                0.87843137, 0.56470588, 0.38039216, 0.64705882, 0.63529412,
            ],
            [
                0.14509804, 0.03921569, 0.03529412, 0.04313725, 0.55294118,
                0.16078431, 0.05490196, 0.45882353, 0.67843137, 0.64313725,
                0.07843137, 0.30980392, 0.43137255, 0.77647059, 0.90980392,
                0.87843137, 0.56078431, 0.38039216, 0.63921569, 0.63529412,
            ],
            [
                0.07843137, 0.03921569, 0.03921569, 0.05882353, 0.64705882,
                0.09803922, 0.05882353, 0.58431373, 0.66274510, 0.65882353,
                0.07843137, 0.30980392, 0.43529412, 0.77254902, 0.90980392,
                0.87450980, 0.56078431, 0.37647059, 0.64313725, 0.63137255,
            ],
            [
                0.05098039, 0.03529412, 0.03529412, 0.09803922, 0.62745098,
                0.07058824, 0.07058824, 0.65882353, 0.65882353, 0.63529412,
                0.07843137, 0.32156863, 0.45098039, 0.77647059, 0.90980392,
                0.87843137, 0.58823529, 0.39215686, 0.63921569, 0.63529412,
            ],
            [
                0.03921569, 0.03529412, 0.03529412, 0.18823529, 0.48235294,
                0.06274510, 0.12156863, 0.68235294, 0.66274510, 0.65098039,
                0.07843137, 0.32549020, 0.46274510, 0.79215686, 0.89803922,
                0.87058824, 0.56862745, 0.39215686, 0.63921569, 0.63137255,
            ],
            [
                0.03921569, 0.03137255, 0.03921569, 0.36470588, 0.32941176,
                0.05490196, 0.24313725, 0.67450980, 0.66274510, 0.63921569,
                0.08235294, 0.32549020, 0.45490196, 0.77647059, 0.89411765,
                0.86666667, 0.56862745, 0.39607843, 0.63921569, 0.61960784,
            ],
            [
                0.03921569, 0.03529412, 0.04313725, 0.59607843, 0.17254902,
                0.05490196, 0.45882353, 0.67450980, 0.66666667, 0.65490196,
                0.08235294, 0.33333333, 0.45098039, 0.77254902, 0.90196078,
                0.87843137, 0.57254902, 0.40000000, 0.64705882, 0.63137255,
            ],
            [
                0.03921569, 0.03921569, 0.04705882, 0.71372549, 0.10588235,
                0.05490196, 0.60784314, 0.66274510, 0.65882353, 0.63921569,
                0.08235294, 0.33333333, 0.46666667, 0.77254902, 0.89019608,
                0.87058824, 0.55686275, 0.40784314, 0.62745098, 0.63529412,
            ],
            [
                0.03529412, 0.03529412, 0.05882353, 0.71764706, 0.07843137,
                0.06274510, 0.68235294, 0.66274510, 0.65882353, 0.64705882,
                0.08627451, 0.33725490, 0.45882353, 0.76470588, 0.88627451,
                0.86666667, 0.55294118, 0.39607843, 0.62745098, 0.63529412,
            ],
            [
                0.03921569, 0.04313725, 0.11372549, 0.52549020, 0.07058824,
                0.13333333, 0.69019608, 0.66274510, 0.65098039, 0.64705882,
                0.09411765, 0.34901961, 0.47450980, 0.76470588, 0.89411765,
                0.87450980, 0.55686275, 0.39607843, 0.60784314, 0.56078431,
            ],
            [
                0.03529412, 0.03921569, 0.30588235, 0.35686275, 0.05882353,
                0.25490196, 0.67843137, 0.68235294, 0.68627451, 0.67450980,
                0.09019608, 0.34509804, 0.49019608, 0.77647059, 0.90196078,
                0.86666667, 0.56470588, 0.40000000, 0.58823529, 0.54901961,
            ],
            [
                0.03529412, 0.03921569, 0.62352941, 0.20392157, 0.05490196,
                0.50980392, 0.78431373, 0.78823529, 0.78039216, 0.76470588,
                0.09019608, 0.33725490, 0.48627451, 0.78823529, 0.89803922,
                0.86666667, 0.59215686, 0.40000000, 0.61960784, 0.58431373,
            ],
            [
                0.03529412, 0.04705882, 0.84705882, 0.11372549, 0.05490196,
                0.65490196, 0.76862745, 0.74117647, 0.74901961, 0.74509804,
                0.09019608, 0.33725490, 0.48627451, 0.77647059, 0.90588235,
                0.86666667, 0.57254902, 0.42745098, 0.63921569, 0.57647059,
            ],
            [
                0.03529412, 0.06274510, 0.85098039, 0.08627451, 0.07450980,
                0.75686275, 0.79607843, 0.78039216, 0.78431373, 0.79607843,
                0.09803922, 0.33333333, 0.51372549, 0.77254902, 0.90196078,
                0.88235294, 0.55294118, 0.43529412, 0.65098039, 0.62745098,
            ],
            [
                0.03921569, 0.13725490, 0.69019608, 0.06666667, 0.15294118,
                0.81176471, 0.80392157, 0.79607843, 0.79607843, 0.81176471,
                0.10196078, 0.33725490, 0.49803922, 0.75294118, 0.90196078,
                0.86666667, 0.57254902, 0.43921569, 0.67058824, 0.64705882,
            ],
        ]
    )
    # fmt: on
    Xtest0 = Xtest_true

    def data_update(X, weight):
        return (X + 1e-6 * Xtest0) / (weight + 1e-6)  # denoising

    T = nd_dctmtx(*patch_shape).astype(Xtest0.dtype)
    gamma = 0.05
    gamma = gamma * np.ones(5)
    Xhat = utl.blind_utl(
        Xtest0,
        T0=T,
        data_update=data_update,
        gamma=gamma,
        patch_config=PatchConfig(
            arr_shape=Xtest0.shape, patch_shape=patch_shape, pad=pad, stride=1
        ),
        niter=5,
        ninner=2,
        prox=prox,
    )

    # fmt: off
    blessed_output = np.array(
        [
            [
                0.21803960, 0.04396460, 0.04825351, 0.03898592, 0.45804900,
                0.27936642, 0.06611557, 0.33735034, 0.66513157, 0.64382040,
                0.08810075, 0.30286216, 0.43799261, 0.76408562, 0.89805135,
                0.86933623, 0.56771840, 0.38274063, 0.62765976, 0.63258256,
            ],
            [
                0.08488032, 0.04754793, 0.04466166, 0.04664265, 0.56972350,
                0.16226284, 0.05846401, 0.47954821, 0.66271883, 0.64989433,
                0.07983886, 0.30823443, 0.44007640, 0.77031446, 0.90187141,
                0.87304058, 0.56692549, 0.38151176, 0.63473574, 0.63296464,
            ],
            [
                0.04008045, 0.04720859, 0.04288830, 0.04123419, 0.62505380,
                0.09436078, 0.05947341, 0.60218008, 0.66015749, 0.64846935,
                0.08082081, 0.31288257, 0.44437760, 0.77368496, 0.90295187,
                0.87311039, 0.56750394, 0.38534093, 0.63703903, 0.63234437,
            ],
            [
                0.04648003, 0.04410291, 0.05023159, 0.07165684, 0.59895034,
                0.08130378, 0.06311404, 0.64878910, 0.65936309, 0.64997239,
                0.08064870, 0.31756644, 0.44808689, 0.77553773, 0.90245636,
                0.87325218, 0.56789892, 0.38837339, 0.63801276, 0.63098776,
            ],
            [
                0.04429031, 0.03859510, 0.05340089, 0.19716992, 0.50244825,
                0.07726507, 0.12135495, 0.65250348, 0.65813624, 0.65201328,
                0.08160699, 0.32209221, 0.45203036, 0.77602452, 0.90091995,
                0.87279954, 0.56791164, 0.39176494, 0.63718315, 0.62876589,
            ],
            [
                0.04336721, 0.04199514, 0.04625788, 0.38860669, 0.34667866,
                0.06539860, 0.27216516, 0.66124156, 0.65930459, 0.65444061,
                0.08271676, 0.32648481, 0.45604065, 0.77559524, 0.89903311,
                0.87219672, 0.56741763, 0.39483042, 0.63486330, 0.62528717,
            ],
            [
                0.04209535, 0.04128891, 0.04247357, 0.58340459, 0.18119376,
                0.05216122, 0.45846017, 0.66122951, 0.66051205, 0.65639466,
                0.08392476, 0.33063106, 0.46026204, 0.77467736, 0.89735200,
                0.87152602, 0.56684590, 0.39749918, 0.63106023, 0.62013213,
            ],
            [
                0.04424446, 0.03967163, 0.03367343, 0.68345017, 0.07820621,
                0.05227498, 0.61556806, 0.66147856, 0.66153533, 0.65878095,
                0.08466032, 0.33461957, 0.46485539, 0.77377530, 0.89630516,
                0.87089758, 0.56711065, 0.39983334, 0.62577953, 0.61331479,
            ],
            [
                0.04705147, 0.04205639, 0.03316620, 0.66742874, 0.06299751,
                0.05535162, 0.67000693, 0.66570612, 0.66695512, 0.66478375,
                0.08515911, 0.33773477, 0.46990695, 0.77328030, 0.89610987,
                0.87038354, 0.56862636, 0.40217776, 0.62003612, 0.60570983,
            ],
            [
                0.04552512, 0.05388751, 0.11995826, 0.56098022, 0.06758627,
                0.12244490, 0.67043872, 0.66815373, 0.66908629, 0.66868657,
                0.08308962, 0.34211905, 0.47535513, 0.77336632, 0.89677461,
                0.87011423, 0.57339016, 0.40497633, 0.61224484, 0.59881791,
            ],
            [
                0.03581296, 0.04445180, 0.33268684, 0.38352898, 0.06240679,
                0.29361097, 0.70223159, 0.69756247, 0.69552281, 0.69620086,
                0.08626025, 0.33922163, 0.48095626, 0.77396618, 0.89812044,
                0.87018867, 0.57564737, 0.40856346, 0.61135258, 0.59416742,
            ],
            [
                0.03478507, 0.02830764, 0.59894203, 0.21614586, 0.06574947,
                0.49064448, 0.74440695, 0.74831606, 0.74668265, 0.74121603,
                0.09742896, 0.33558890, 0.48632059, 0.77515223, 0.90002270,
                0.87077066, 0.57673384, 0.41274978, 0.61488808, 0.59218024,
            ],
            [
                0.03679568, 0.04984158, 0.84416481, 0.09579946, 0.05983077,
                0.65536891, 0.75961503, 0.77020547, 0.76765736, 0.75899657,
                0.10010205, 0.33970847, 0.49126750, 0.77679831, 0.90210752,
                0.87151840, 0.57466311, 0.41753070, 0.62467696, 0.59231304,
            ],
            [
                0.02987445, 0.07768822, 0.81419913, 0.06345725, 0.07514518,
                0.76571870, 0.77127137, 0.76964926, 0.76830223, 0.76296181,
                0.09419528, 0.34358091, 0.49529063, 0.78085187, 0.90549424,
                0.87355771, 0.57419485, 0.42019720, 0.63155170, 0.59257854,
            ],
            [
                0.04877848, 0.13686370, 0.75250477, 0.08927683, 0.12754723,
                0.84677885, 0.79735022, 0.76921283, 0.77333499, 0.76142322,
                0.10073288, 0.34759251, 0.50048788, 0.78311493, 0.90668149,
                0.87233813, 0.57531294, 0.42684860, 0.63470549, 0.59315735,
            ],
        ]
    )

    blessed_T = np.array(
        [

            [
                3.31409168e-01, 3.32815182e-01, 3.31526214e-01,
                3.33492791e-01, 3.33755207e-01, 3.32937427e-01,
                3.35244859e-01, 3.35305504e-01, 3.33490902e-01,
            ],
            [
                4.07525351e-01, 1.61869904e-03, -3.99120210e-01,
                4.15813005e-01, -5.94028744e-04, -4.15776302e-01,
                4.00606488e-01, -2.34422657e-03, -4.10319060e-01,
            ],
            [
                2.34680922e-01, -4.59947616e-01, 2.12766466e-01,
                2.46555740e-01, -4.90872636e-01, 2.47574814e-01,
                2.26398440e-01, -4.60935859e-01, 2.47682056e-01,
            ],
            [
                4.14989112e-01, 3.95897069e-01, 4.03503379e-01,
                -1.77607567e-02, 1.73864206e-04, 4.47388605e-02,
                -3.96738990e-01, -4.07537054e-01, -4.27117377e-01,
            ],
            [
                4.96769643e-01, 2.51025318e-02, -4.97331175e-01,
                -2.67506372e-02, 4.44271495e-02, -3.66947341e-02,
                -4.80505871e-01, -4.04963804e-02, 5.18352937e-01,
            ],
            [
                3.01700722e-01, -5.79018216e-01, 2.65824808e-01,
                1.69487153e-02, -1.13274952e-02, -3.86573333e-03,
                -3.17367581e-01, 5.81163932e-01, -2.53273645e-01,
            ],
            [
                4.92283604e-02, 6.67105202e-02, 4.41826377e-01,
                -1.02722877e-01, -1.11661801e-01, -7.95018983e-01,
                5.35766480e-02, 2.62488197e-02, 3.73203349e-01,
            ],
            [
                3.90360582e-01, -9.03251835e-02, -3.48377513e-02,
                -7.94441385e-01, 1.09206308e-01, 8.67401864e-02,
                4.27906297e-01, -4.06405813e-02, -5.38874813e-02,
            ],
            [
                -6.47436098e-02, -4.15263738e-01, 9.10139516e-02,
                1.09931649e-01, 7.88133666e-01, -1.09760612e-01,
                -2.97475469e-02, -4.09004005e-01, 4.03054086e-02,
            ],
        ]
    )
    # fmt: on

    assert np.allclose(Xhat, blessed_output)
    assert np.allclose(T, blessed_T)
